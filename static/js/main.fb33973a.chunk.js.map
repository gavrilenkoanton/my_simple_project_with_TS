{"version":3,"sources":["MySkills/MySkills.module.css","HelloComponent/Hello.module.css","App.module.css","MyName/MyName.module.css","HelloComponent/ListOfFriends/ListOfFriends.module.css","MySkills/MySkills.tsx","MyName/MyName.tsx","HelloComponent/ListOfFriends/ListOfFriends.tsx","HelloComponent/Hello.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","MySkills","mySkills","props","map","item","className","styles","skill","render","React","Component","MyName","nameMas","colorMas","printMyName","setState","myName","onMouseOver","c","i","key","style","color","Math","floor","random","length","ListOfFriends","list","name","Hello","titleRef","createRef","state","names","onButtonClick","inputValue","current","value","alert","newMas","writeMyFriends","index","wrapper","type","placeholder","ref","onClick","friends","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4HACAA,EAAOC,QAAU,CAAC,SAAW,2BAA2B,MAAQ,0B,gBCAhED,EAAOC,QAAU,CAAC,QAAU,uBAAuB,QAAU,yB,kBCA7DD,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,KAAO,8B,oMCwBVC,E,2MAjBXC,SAAW,EAAKC,MAAMD,SAASE,KAAI,SAACC,GAChC,OACI,yBAAKC,UAAWC,IAAOC,OAClBH,EAAKG,U,EAIlBC,OAAS,WAEL,OACI,yBAAKH,UAAWC,IAAOL,UAClB,EAAKA,W,6BAZCQ,IAAMC,W,iBCqBdC,E,2MAxBXC,QAAU,CAAC,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,IAAK,SAAK,SAAK,SAAK,SAAK,U,EACtFC,SAAW,CAAC,MAAO,SAAU,SAAU,QAAS,OAAQ,U,EACxDC,YAAc,WACV,EAAKC,SAAS,K,EAGlBP,OAAS,WACL,OACI,yBAAKH,UAAWC,IAAOU,QAAvB,yCACI,uBAAGC,YAAa,EAAKH,aAChB,EAAKF,QAAQT,KAAI,SAACe,EAAGC,GAAJ,OACd,0BACIC,IAAKD,EACLE,MAAO,CAACC,MAAO,EAAKT,SAASU,KAAKC,MAAMD,KAAKE,SAAW,EAAKZ,SAASa,WAErER,S,6BAhBRT,IAAMC,W,yCCeZiB,E,2MATXnB,OAAS,WACL,OACI,0BAAMH,UAAWC,IAAOsB,MACnB,EAAK1B,MAAM2B,O,6BALApB,IAAMC,WCkCnBoB,E,2MAhCXC,SAAWtB,IAAMuB,Y,EACjBC,MAAQ,CACJC,MAAO,I,EAEXC,cAAgB,WACZ,IAAIC,EAAqB,EAAKL,SAASM,QAAU,EAAKN,SAASM,QAAQC,MAAQ,GAC3E,EAAKP,SAASM,UAAS,EAAKN,SAASM,QAAQC,MAAQ,IACzDC,MAAM,mCAAYH,GAClB,IACII,EAAM,CADY,CAACX,KAAMO,IACnB,mBAAgB,EAAKH,MAAMC,QACrC,EAAKnB,SAAS,CAACmB,MAAOM,K,EAG1BhC,OAAS,WACL,IAAIiC,EAAiB,EAAKR,MAAMC,MAAM/B,KAAI,SAACgB,EAAQuB,GAC/C,OAAO,0IAA0B,kBAAC,EAAD,CAAeb,KAAMV,EAAEU,KAAMT,IAAKsB,QAGvE,OACI,yBAAKrC,UAAWC,IAAOqC,SACnB,6BACI,2BAAOC,KAAK,OAAOC,YAAY,6EAAiBC,IAAK,EAAKf,WAC1D,4BAAQgB,QAAS,EAAKZ,eAAtB,SAEJ,yBAAK9B,UAAWC,IAAO0C,SAClBP,K,6BA1BDhC,IAAMC,WCaXuC,MAXf,SAAa/C,GAET,OACI,yBAAKG,UAAWC,IAAO2C,KACnB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUhD,SAAUC,EAAMD,WAC1B,kBAAC,EAAD,QCJQiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAAS/C,OAAO,kBAAC,EAAD,CAAKP,SANZ,CACL,CAACM,MAAO,kCACR,CAACA,MAAO,kCACR,CAACA,MAAO,gFAG0BiD,SAASC,eAAe,SD+HxD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fb33973a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mySkills\":\"MySkills_mySkills__1zRWX\",\"skill\":\"MySkills_skill__UU3fb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Hello_wrapper__2hbTr\",\"friends\":\"Hello_friends__AI6vl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16Hvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myName\":\"MyName_myName__32TP4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ListOfFriends_list__2eHM_\"};","import React from 'react';\nimport styles from './MySkills.module.css';\n\ninterface IProps {\n    mySkills: Array<object>\n}\n\nclass MySkills extends React.Component<IProps> {\n    mySkills = this.props.mySkills.map((item: any) => {\n        return (\n            <div className={styles.skill}>\n                {item.skill}\n            </div>\n        )\n    });\n    render = () => {\n\n        return (\n            <div className={styles.mySkills}>\n                {this.mySkills}\n            </div>\n        );\n    }\n}\n\nexport default MySkills;\n","import React from 'react';\nimport styles from './MyName.module.css';\n\nclass MyName extends React.Component {\n    nameMas = [\"Г\", \"а\", \"в\", \"р\", \"и\", \"л\", \"е\", \"н\", \"к\", \"о\", \" \", \"А\", \"н\", \"т\", \"о\", \"н\",];\n    colorMas = [\"red\", \"orange\", \"violet\", \"green\", \"blue\", \"purple\"];\n    printMyName = () => {\n        this.setState({});\n    };\n\n    render = () => {\n        return (\n            <div className={styles.myName}>Дароу, я\n                <p onMouseOver={this.printMyName}>\n                    {this.nameMas.map((c, i) => (\n                        <span\n                            key={i}\n                            style={{color: this.colorMas[Math.floor(Math.random() * this.colorMas.length)]}}\n                        >\n                            {c}\n                        </span>\n                    ))}\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default MyName;\n","import React from 'react';\nimport styles from './ListOfFriends.module.css';\n\ninterface IProps {\n    name: string\n}\n\nclass ListOfFriends extends React.Component<IProps> {\n\n    render = () => {\n        return (\n            <span className={styles.list}>\n                {this.props.name}\n            </span>\n        );\n    }\n}\n\nexport default ListOfFriends;\n","import React from 'react';\nimport styles from './Hello.module.css';\nimport ListOfFriends from \"./ListOfFriends/ListOfFriends\";\n\ninterface IProps {\n\n}\n\nclass Hello extends React.Component<IProps> {\n    titleRef = React.createRef<HTMLInputElement>();\n    state = {\n        names: []\n    };\n    onButtonClick = () => {\n        let inputValue: string = this.titleRef.current ? this.titleRef.current.value : '';\n        if (this.titleRef.current) this.titleRef.current.value = '';\n        alert(\"Дароу, \" + inputValue);\n        let newName: object = {name: inputValue};\n        let newMas = [newName, ...this.state.names];\n        this.setState({names: newMas});\n    };\n\n    render = () => {\n        let writeMyFriends = this.state.names.map((i: any, index: number) => {\n            return <div>К нам присоединился: <ListOfFriends name={i.name} key={index}/></div>\n        });\n\n        return (\n            <div className={styles.wrapper}>\n                <div>\n                    <input type=\"text\" placeholder=\"Введи свое имя\" ref={this.titleRef}/>\n                    <button onClick={this.onButtonClick}>Push</button>\n                </div>\n                <div className={styles.friends}>\n                    {writeMyFriends}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Hello;\n","import React from 'react';\nimport styles from './App.module.css';\nimport MySkills from \"./MySkills/MySkills\";\nimport MyName from \"./MyName/MyName\";\nimport Hello from \"./HelloComponent/Hello\";\n\ninterface IProps {\n    mySkills: Array<object>\n}\n\nfunction App(props: IProps) {\n\n    return (\n        <div className={styles.App}>\n            <MyName/>\n            <MySkills mySkills={props.mySkills}/>\n            <Hello/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet me = [\n    {skill: 'кручу'},\n    {skill: 'верчу'},\n    {skill: 'запутать хочу'}\n];\n\nReactDOM.render(<App mySkills={me}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}